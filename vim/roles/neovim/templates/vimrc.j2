" Instruction
"    - After finished, save the file and execute command below to apply the
"    change
"          
"           :so %
"
"    - To install Plugin:
"    
"           :PlugInstall
"
"    - To get plugin status
"
"           :PlugStatus
"
"''''''''''''''''''''''''''''''

{% if enable_line_num %}
" Show line number 
set nu
{% endif %}

set encoding=UTF-8

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

set autoread
set autowrite
set autoindent
set si "smart indent

" show existing tab with 2 spaces width
set tabstop={{ shift_space }}

" when indenting with '>', use 2 spaces width
set shiftwidth={{ shift_space }}

" Fine tunes the amount of white space to be added
set softtabstop={{ shift_space }}

" On pressing tab
set expandtab

syntax on

{% if enable_mouse %}
if has('mouse')
  set mouse=a
endif
{% endif %}

filetype plugin on

" Mapping key

map <C-Up> :tabnew "
map <C-Left> :tabprevious<CR>
map <C-Right> :tabnext<CR>


" Resize window
map <Leader>sv :vertical resize 
map <Leader>s :resize 


{% if enable_floating_terminal %}
"''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
"                      Floating Terminal                      '
"                                                             '
"''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

" Open Terminal
map <Leader>at :call FloatTerm()<CR>

" Source code
let s:float_term_border_win = 0
let s:float_term_win = 0
function! FloatTerm(...)
  " Configuration
  let height = float2nr((&lines - 2) * 0.8)
  let row = float2nr((&lines - height) / 2)
  let width = float2nr(&columns * 0.8)
  let col = float2nr((&columns - width) / 2)
  " Border Window
  let border_opts = {
        \ 'relative': 'editor',
        \ 'row': row - 1,
        \ 'col': col - 2,
        \ 'width': width + 4,
        \ 'height': height + 2,
        \ 'style': 'minimal'
        \ }
  " Terminal Window
  let opts = {
        \ 'relative': 'editor',
        \ 'row': row,
        \ 'col': col,
        \ 'width': width,
        \ 'height': height,
        \ 'style': 'minimal'
        \ }
  let top = "╭" . repeat("─", width + 2) . "╮"
  let mid = "│" . repeat(" ", width + 2) . "│"
  let bot = "╰" . repeat("─", width + 2) . "╯"
  let lines = [top] + repeat([mid], height) + [bot]
  let bbuf = nvim_create_buf(v:false, v:true)
  call nvim_buf_set_lines(bbuf, 0, -1, v:true, lines)
  let s:float_term_border_win = nvim_open_win(bbuf, v:true, border_opts)
  let buf = nvim_create_buf(v:false, v:true)
  let s:float_term_win = nvim_open_win(buf, v:true, opts)
  " Styling
  hi FloatWinBorder guifg=#87bb7c
  call setwinvar(s:float_term_border_win, '&winhl', 'Normal:FloatWinBorder')
  call setwinvar(s:float_term_win, '&winhl', 'Normal:Normal')
  if a:0 == 0
    terminal
  else
    call termopen(a:1)
  endif
  startinsert
  " Close border window when terminal window close
  autocmd TermClose * ++once :bd! | call nvim_win_close(s:float_term_border_win, v:true)
endfunction


" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'
{% endif %}


"''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
" Initial Plugin session 
"''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
call plug#begin('~/.vim/plugged')

call plug#end()
